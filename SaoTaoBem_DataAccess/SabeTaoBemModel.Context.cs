//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SaoTaoBem_DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SabeTaoBemEntities : DbContext
    {
        public SabeTaoBemEntities()
            : base("name=SabeTaoBemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbComments> tbComments { get; set; }
        public virtual DbSet<tbIngredientCategory> tbIngredientCategory { get; set; }
        public virtual DbSet<tbIngredients> tbIngredients { get; set; }
        public virtual DbSet<tbLogin> tbLogin { get; set; }
        public virtual DbSet<tbRecipeCategory> tbRecipeCategory { get; set; }
        public virtual DbSet<tbRecipeDifficultyLevel> tbRecipeDifficultyLevel { get; set; }
        public virtual DbSet<tbRecipeFoodStyle> tbRecipeFoodStyle { get; set; }
        public virtual DbSet<tbRecipeIngredient> tbRecipeIngredient { get; set; }
        public virtual DbSet<tbRecipeMealCost> tbRecipeMealCost { get; set; }
        public virtual DbSet<tbRecipes> tbRecipes { get; set; }
        public virtual DbSet<tbStatus> tbStatus { get; set; }
        public virtual DbSet<tbUnitCategory> tbUnitCategory { get; set; }
        public virtual DbSet<tbUnits> tbUnits { get; set; }
        public virtual DbSet<tbUnitSystem> tbUnitSystem { get; set; }
        public virtual DbSet<tbUserFunction> tbUserFunction { get; set; }
        public virtual DbSet<tbUsers> tbUsers { get; set; }
    
        public virtual int spDelComment(Nullable<int> idComment)
        {
            var idCommentParameter = idComment.HasValue ?
                new ObjectParameter("idComment", idComment) :
                new ObjectParameter("idComment", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelComment", idCommentParameter);
        }
    
        public virtual int spDelIngredient(Nullable<int> idIngredient)
        {
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelIngredient", idIngredientParameter);
        }
    
        public virtual int spDelLogin(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelLogin", idParameter);
        }
    
        public virtual int spDelRecipe(Nullable<int> idRecipe)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelRecipe", idRecipeParameter);
        }
    
        public virtual int spDelRecipeIng(Nullable<int> idRecipe, Nullable<int> idIngredient)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelRecipeIng", idRecipeParameter, idIngredientParameter);
        }
    
        public virtual int spDelUnit(Nullable<byte> idUnit)
        {
            var idUnitParameter = idUnit.HasValue ?
                new ObjectParameter("idUnit", idUnit) :
                new ObjectParameter("idUnit", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelUnit", idUnitParameter);
        }
    
        public virtual int spDelUser(Nullable<int> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDelUser", idUserParameter);
        }
    
        public virtual int spInsComment(string comment, Nullable<int> recipeId, Nullable<int> userId, Nullable<byte> statusID)
        {
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var recipeIdParameter = recipeId.HasValue ?
                new ObjectParameter("recipeId", recipeId) :
                new ObjectParameter("recipeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("statusID", statusID) :
                new ObjectParameter("statusID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsComment", commentParameter, recipeIdParameter, userIdParameter, statusIDParameter);
        }
    
        public virtual int spInsIngredient(string ingredientName, Nullable<byte> categoryId)
        {
            var ingredientNameParameter = ingredientName != null ?
                new ObjectParameter("ingredientName", ingredientName) :
                new ObjectParameter("ingredientName", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsIngredient", ingredientNameParameter, categoryIdParameter);
        }
    
        public virtual int spInsIngredientCategory(string category)
        {
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsIngredientCategory", categoryParameter);
        }
    
        public virtual int spInsLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsLogin", usernameParameter, passwordParameter);
        }
    
        public virtual int spInsRecipeIng(Nullable<int> idRecipe, Nullable<int> idIngredient, Nullable<byte> unitId, Nullable<decimal> quantity)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("unitId", unitId) :
                new ObjectParameter("unitId", typeof(byte));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsRecipeIng", idRecipeParameter, idIngredientParameter, unitIdParameter, quantityParameter);
        }
    
        public virtual int spInsRecipes(string recipeName, Nullable<int> userId, Nullable<byte> recCategoryId, Nullable<byte> recFoodStyleId, Nullable<byte> recDifficultyLevelId, Nullable<byte> recMealCostId, Nullable<int> preparationTime, Nullable<int> cookTime, Nullable<int> doses, string description, Nullable<byte> statusId, Nullable<decimal> evaluation, byte[] picture)
        {
            var recipeNameParameter = recipeName != null ?
                new ObjectParameter("recipeName", recipeName) :
                new ObjectParameter("recipeName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var recCategoryIdParameter = recCategoryId.HasValue ?
                new ObjectParameter("recCategoryId", recCategoryId) :
                new ObjectParameter("recCategoryId", typeof(byte));
    
            var recFoodStyleIdParameter = recFoodStyleId.HasValue ?
                new ObjectParameter("recFoodStyleId", recFoodStyleId) :
                new ObjectParameter("recFoodStyleId", typeof(byte));
    
            var recDifficultyLevelIdParameter = recDifficultyLevelId.HasValue ?
                new ObjectParameter("recDifficultyLevelId", recDifficultyLevelId) :
                new ObjectParameter("recDifficultyLevelId", typeof(byte));
    
            var recMealCostIdParameter = recMealCostId.HasValue ?
                new ObjectParameter("recMealCostId", recMealCostId) :
                new ObjectParameter("recMealCostId", typeof(byte));
    
            var preparationTimeParameter = preparationTime.HasValue ?
                new ObjectParameter("preparationTime", preparationTime) :
                new ObjectParameter("preparationTime", typeof(int));
    
            var cookTimeParameter = cookTime.HasValue ?
                new ObjectParameter("cookTime", cookTime) :
                new ObjectParameter("cookTime", typeof(int));
    
            var dosesParameter = doses.HasValue ?
                new ObjectParameter("doses", doses) :
                new ObjectParameter("doses", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            var evaluationParameter = evaluation.HasValue ?
                new ObjectParameter("evaluation", evaluation) :
                new ObjectParameter("evaluation", typeof(decimal));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsRecipes", recipeNameParameter, userIdParameter, recCategoryIdParameter, recFoodStyleIdParameter, recDifficultyLevelIdParameter, recMealCostIdParameter, preparationTimeParameter, cookTimeParameter, dosesParameter, descriptionParameter, statusIdParameter, evaluationParameter, pictureParameter);
        }
    
        public virtual int spInsUnits(string unitName, Nullable<byte> unitCategoryId, Nullable<byte> unitSystemId)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            var unitCategoryIdParameter = unitCategoryId.HasValue ?
                new ObjectParameter("unitCategoryId", unitCategoryId) :
                new ObjectParameter("unitCategoryId", typeof(byte));
    
            var unitSystemIdParameter = unitSystemId.HasValue ?
                new ObjectParameter("unitSystemId", unitSystemId) :
                new ObjectParameter("unitSystemId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsUnits", unitNameParameter, unitCategoryIdParameter, unitSystemIdParameter);
        }
    
        public virtual int spInsUser(string firstName, string lastName, string email, string username, string password, Nullable<byte> userFunctionId, Nullable<byte> statusId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var userFunctionIdParameter = userFunctionId.HasValue ?
                new ObjectParameter("userFunctionId", userFunctionId) :
                new ObjectParameter("userFunctionId", typeof(byte));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsUser", firstNameParameter, lastNameParameter, emailParameter, usernameParameter, passwordParameter, userFunctionIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSelComment_Result> spSelComment(Nullable<int> idComment, Nullable<int> recipeId, Nullable<int> userId, Nullable<byte> statusId)
        {
            var idCommentParameter = idComment.HasValue ?
                new ObjectParameter("idComment", idComment) :
                new ObjectParameter("idComment", typeof(int));
    
            var recipeIdParameter = recipeId.HasValue ?
                new ObjectParameter("recipeId", recipeId) :
                new ObjectParameter("recipeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelComment_Result>("spSelComment", idCommentParameter, recipeIdParameter, userIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSelIngredient_Result> spSelIngredient(Nullable<int> idIngredient, string ingredientName, Nullable<byte> idIngCategory)
        {
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            var ingredientNameParameter = ingredientName != null ?
                new ObjectParameter("ingredientName", ingredientName) :
                new ObjectParameter("ingredientName", typeof(string));
    
            var idIngCategoryParameter = idIngCategory.HasValue ?
                new ObjectParameter("idIngCategory", idIngCategory) :
                new ObjectParameter("idIngCategory", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelIngredient_Result>("spSelIngredient", idIngredientParameter, ingredientNameParameter, idIngCategoryParameter);
        }
    
        public virtual ObjectResult<spSelIngredientCategory_Result> spSelIngredientCategory(Nullable<byte> id, string ingCategory)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(byte));
    
            var ingCategoryParameter = ingCategory != null ?
                new ObjectParameter("ingCategory", ingCategory) :
                new ObjectParameter("ingCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelIngredientCategory_Result>("spSelIngredientCategory", idParameter, ingCategoryParameter);
        }
    
        public virtual ObjectResult<spSelLogin_Result> spSelLogin(Nullable<int> idLogin, string username, string password)
        {
            var idLoginParameter = idLogin.HasValue ?
                new ObjectParameter("idLogin", idLogin) :
                new ObjectParameter("idLogin", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelLogin_Result>("spSelLogin", idLoginParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<spSelRecipeIng_Result> spSelRecipeIng(Nullable<int> idRecipe, Nullable<int> idIngredient)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelRecipeIng_Result>("spSelRecipeIng", idRecipeParameter, idIngredientParameter);
        }
    
        public virtual ObjectResult<spSelRecipes_Result> spSelRecipes(Nullable<int> idRecipe, string recipeName, Nullable<byte> recCategoryId, Nullable<byte> recFoodStyleId, Nullable<byte> recDifficultyLevelId, Nullable<byte> recMealCostId, Nullable<int> preparationTime, Nullable<int> cookTime, Nullable<int> doses, Nullable<decimal> evaluation, Nullable<byte> statusId)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            var recipeNameParameter = recipeName != null ?
                new ObjectParameter("recipeName", recipeName) :
                new ObjectParameter("recipeName", typeof(string));
    
            var recCategoryIdParameter = recCategoryId.HasValue ?
                new ObjectParameter("recCategoryId", recCategoryId) :
                new ObjectParameter("recCategoryId", typeof(byte));
    
            var recFoodStyleIdParameter = recFoodStyleId.HasValue ?
                new ObjectParameter("recFoodStyleId", recFoodStyleId) :
                new ObjectParameter("recFoodStyleId", typeof(byte));
    
            var recDifficultyLevelIdParameter = recDifficultyLevelId.HasValue ?
                new ObjectParameter("recDifficultyLevelId", recDifficultyLevelId) :
                new ObjectParameter("recDifficultyLevelId", typeof(byte));
    
            var recMealCostIdParameter = recMealCostId.HasValue ?
                new ObjectParameter("recMealCostId", recMealCostId) :
                new ObjectParameter("recMealCostId", typeof(byte));
    
            var preparationTimeParameter = preparationTime.HasValue ?
                new ObjectParameter("preparationTime", preparationTime) :
                new ObjectParameter("preparationTime", typeof(int));
    
            var cookTimeParameter = cookTime.HasValue ?
                new ObjectParameter("cookTime", cookTime) :
                new ObjectParameter("cookTime", typeof(int));
    
            var dosesParameter = doses.HasValue ?
                new ObjectParameter("doses", doses) :
                new ObjectParameter("doses", typeof(int));
    
            var evaluationParameter = evaluation.HasValue ?
                new ObjectParameter("evaluation", evaluation) :
                new ObjectParameter("evaluation", typeof(decimal));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelRecipes_Result>("spSelRecipes", idRecipeParameter, recipeNameParameter, recCategoryIdParameter, recFoodStyleIdParameter, recDifficultyLevelIdParameter, recMealCostIdParameter, preparationTimeParameter, cookTimeParameter, dosesParameter, evaluationParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSelUnit_Result> spSelUnit(Nullable<byte> idUnit, string unitName, Nullable<byte> unitcategoryid, Nullable<byte> unitsystemid)
        {
            var idUnitParameter = idUnit.HasValue ?
                new ObjectParameter("idUnit", idUnit) :
                new ObjectParameter("idUnit", typeof(byte));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            var unitcategoryidParameter = unitcategoryid.HasValue ?
                new ObjectParameter("unitcategoryid", unitcategoryid) :
                new ObjectParameter("unitcategoryid", typeof(byte));
    
            var unitsystemidParameter = unitsystemid.HasValue ?
                new ObjectParameter("unitsystemid", unitsystemid) :
                new ObjectParameter("unitsystemid", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUnit_Result>("spSelUnit", idUnitParameter, unitNameParameter, unitcategoryidParameter, unitsystemidParameter);
        }
    
        public virtual ObjectResult<spSelUsers_Result> spSelUsers(Nullable<int> idUser, Nullable<int> loginId, Nullable<byte> statusId)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUsers_Result>("spSelUsers", idUserParameter, loginIdParameter, statusIdParameter);
        }
    
        public virtual int spUpComments(Nullable<int> idComment, string comment, Nullable<int> recipeId, Nullable<int> userId, Nullable<byte> statusId)
        {
            var idCommentParameter = idComment.HasValue ?
                new ObjectParameter("idComment", idComment) :
                new ObjectParameter("idComment", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var recipeIdParameter = recipeId.HasValue ?
                new ObjectParameter("recipeId", recipeId) :
                new ObjectParameter("recipeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpComments", idCommentParameter, commentParameter, recipeIdParameter, userIdParameter, statusIdParameter);
        }
    
        public virtual int spUpIngredient(Nullable<int> idIngredient, string ingredientName, Nullable<byte> ingCategoryID)
        {
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            var ingredientNameParameter = ingredientName != null ?
                new ObjectParameter("ingredientName", ingredientName) :
                new ObjectParameter("ingredientName", typeof(string));
    
            var ingCategoryIDParameter = ingCategoryID.HasValue ?
                new ObjectParameter("ingCategoryID", ingCategoryID) :
                new ObjectParameter("ingCategoryID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpIngredient", idIngredientParameter, ingredientNameParameter, ingCategoryIDParameter);
        }
    
        public virtual int spUpLogin(Nullable<int> id, string password)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpLogin", idParameter, passwordParameter);
        }
    
        public virtual int spUpRecipeIng(Nullable<int> idRecipe, Nullable<int> idIngredient, Nullable<byte> unitId, Nullable<decimal> quantity)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("unitId", unitId) :
                new ObjectParameter("unitId", typeof(byte));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpRecipeIng", idRecipeParameter, idIngredientParameter, unitIdParameter, quantityParameter);
        }
    
        public virtual int spUpRecipes(Nullable<int> idRecipe, string recipeName, Nullable<byte> recCategoryId, Nullable<byte> recFoodStyleId, Nullable<byte> recDifficultyLevelId, Nullable<byte> recMealCostId, Nullable<int> preparationTime, Nullable<int> cookTime, Nullable<int> doses, Nullable<decimal> evaluation, string description, byte[] picture, Nullable<byte> statusId)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            var recipeNameParameter = recipeName != null ?
                new ObjectParameter("recipeName", recipeName) :
                new ObjectParameter("recipeName", typeof(string));
    
            var recCategoryIdParameter = recCategoryId.HasValue ?
                new ObjectParameter("recCategoryId", recCategoryId) :
                new ObjectParameter("recCategoryId", typeof(byte));
    
            var recFoodStyleIdParameter = recFoodStyleId.HasValue ?
                new ObjectParameter("recFoodStyleId", recFoodStyleId) :
                new ObjectParameter("recFoodStyleId", typeof(byte));
    
            var recDifficultyLevelIdParameter = recDifficultyLevelId.HasValue ?
                new ObjectParameter("recDifficultyLevelId", recDifficultyLevelId) :
                new ObjectParameter("recDifficultyLevelId", typeof(byte));
    
            var recMealCostIdParameter = recMealCostId.HasValue ?
                new ObjectParameter("recMealCostId", recMealCostId) :
                new ObjectParameter("recMealCostId", typeof(byte));
    
            var preparationTimeParameter = preparationTime.HasValue ?
                new ObjectParameter("preparationTime", preparationTime) :
                new ObjectParameter("preparationTime", typeof(int));
    
            var cookTimeParameter = cookTime.HasValue ?
                new ObjectParameter("cookTime", cookTime) :
                new ObjectParameter("cookTime", typeof(int));
    
            var dosesParameter = doses.HasValue ?
                new ObjectParameter("doses", doses) :
                new ObjectParameter("doses", typeof(int));
    
            var evaluationParameter = evaluation.HasValue ?
                new ObjectParameter("evaluation", evaluation) :
                new ObjectParameter("evaluation", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("picture", picture) :
                new ObjectParameter("picture", typeof(byte[]));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpRecipes", idRecipeParameter, recipeNameParameter, recCategoryIdParameter, recFoodStyleIdParameter, recDifficultyLevelIdParameter, recMealCostIdParameter, preparationTimeParameter, cookTimeParameter, dosesParameter, evaluationParameter, descriptionParameter, pictureParameter, statusIdParameter);
        }
    
        public virtual int spUpUnits(Nullable<byte> idUnit, string unitName, Nullable<byte> unitCategoryId, Nullable<byte> unitSystemId)
        {
            var idUnitParameter = idUnit.HasValue ?
                new ObjectParameter("idUnit", idUnit) :
                new ObjectParameter("idUnit", typeof(byte));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            var unitCategoryIdParameter = unitCategoryId.HasValue ?
                new ObjectParameter("unitCategoryId", unitCategoryId) :
                new ObjectParameter("unitCategoryId", typeof(byte));
    
            var unitSystemIdParameter = unitSystemId.HasValue ?
                new ObjectParameter("unitSystemId", unitSystemId) :
                new ObjectParameter("unitSystemId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpUnits", idUnitParameter, unitNameParameter, unitCategoryIdParameter, unitSystemIdParameter);
        }
    
        public virtual int spUpUsers(Nullable<int> idUser, string firstName, string lastName, string email, Nullable<byte> userFunctionID, Nullable<byte> statusID)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var userFunctionIDParameter = userFunctionID.HasValue ?
                new ObjectParameter("userFunctionID", userFunctionID) :
                new ObjectParameter("userFunctionID", typeof(byte));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("statusID", statusID) :
                new ObjectParameter("statusID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpUsers", idUserParameter, firstNameParameter, lastNameParameter, emailParameter, userFunctionIDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<tbUsers> fnSelUsers(Nullable<int> idUser, Nullable<int> loginId, Nullable<byte> statusId)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbUsers>("fnSelUsers", idUserParameter, loginIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<tbUsers> fnSelUsers(Nullable<int> idUser, Nullable<int> loginId, Nullable<byte> statusId, MergeOption mergeOption)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tbUsers>("fnSelUsers", mergeOption, idUserParameter, loginIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSelCommentDetail_Result> spSelCommentDetail(Nullable<int> idComment, Nullable<int> recipeId, Nullable<int> userId, Nullable<byte> statusId)
        {
            var idCommentParameter = idComment.HasValue ?
                new ObjectParameter("idComment", idComment) :
                new ObjectParameter("idComment", typeof(int));
    
            var recipeIdParameter = recipeId.HasValue ?
                new ObjectParameter("recipeId", recipeId) :
                new ObjectParameter("recipeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelCommentDetail_Result>("spSelCommentDetail", idCommentParameter, recipeIdParameter, userIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSelIngredientDetail_Result> spSelIngredientDetail(Nullable<int> idIngredient, string ingredientName, Nullable<byte> idIngCategory)
        {
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            var ingredientNameParameter = ingredientName != null ?
                new ObjectParameter("ingredientName", ingredientName) :
                new ObjectParameter("ingredientName", typeof(string));
    
            var idIngCategoryParameter = idIngCategory.HasValue ?
                new ObjectParameter("idIngCategory", idIngCategory) :
                new ObjectParameter("idIngCategory", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelIngredientDetail_Result>("spSelIngredientDetail", idIngredientParameter, ingredientNameParameter, idIngCategoryParameter);
        }
    
        public virtual ObjectResult<spSelRecipeByIng_Result> spSelRecipeByIng(Nullable<int> idIngredient, string ingredientName)
        {
            var idIngredientParameter = idIngredient.HasValue ?
                new ObjectParameter("idIngredient", idIngredient) :
                new ObjectParameter("idIngredient", typeof(int));
    
            var ingredientNameParameter = ingredientName != null ?
                new ObjectParameter("ingredientName", ingredientName) :
                new ObjectParameter("ingredientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelRecipeByIng_Result>("spSelRecipeByIng", idIngredientParameter, ingredientNameParameter);
        }
    
        public virtual ObjectResult<spSelRecipeDetails_Result> spSelRecipeDetails(Nullable<int> idRecipe, string recipeName, Nullable<byte> recCategoryId, Nullable<byte> recFoodStyleId, Nullable<byte> recDifficultyLevelId, Nullable<byte> recMealCostId, Nullable<int> preparationTime, Nullable<int> cookTime, Nullable<int> doses, Nullable<decimal> evaluation, Nullable<byte> statusId)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            var recipeNameParameter = recipeName != null ?
                new ObjectParameter("recipeName", recipeName) :
                new ObjectParameter("recipeName", typeof(string));
    
            var recCategoryIdParameter = recCategoryId.HasValue ?
                new ObjectParameter("recCategoryId", recCategoryId) :
                new ObjectParameter("recCategoryId", typeof(byte));
    
            var recFoodStyleIdParameter = recFoodStyleId.HasValue ?
                new ObjectParameter("recFoodStyleId", recFoodStyleId) :
                new ObjectParameter("recFoodStyleId", typeof(byte));
    
            var recDifficultyLevelIdParameter = recDifficultyLevelId.HasValue ?
                new ObjectParameter("recDifficultyLevelId", recDifficultyLevelId) :
                new ObjectParameter("recDifficultyLevelId", typeof(byte));
    
            var recMealCostIdParameter = recMealCostId.HasValue ?
                new ObjectParameter("recMealCostId", recMealCostId) :
                new ObjectParameter("recMealCostId", typeof(byte));
    
            var preparationTimeParameter = preparationTime.HasValue ?
                new ObjectParameter("preparationTime", preparationTime) :
                new ObjectParameter("preparationTime", typeof(int));
    
            var cookTimeParameter = cookTime.HasValue ?
                new ObjectParameter("cookTime", cookTime) :
                new ObjectParameter("cookTime", typeof(int));
    
            var dosesParameter = doses.HasValue ?
                new ObjectParameter("doses", doses) :
                new ObjectParameter("doses", typeof(int));
    
            var evaluationParameter = evaluation.HasValue ?
                new ObjectParameter("evaluation", evaluation) :
                new ObjectParameter("evaluation", typeof(decimal));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelRecipeDetails_Result>("spSelRecipeDetails", idRecipeParameter, recipeNameParameter, recCategoryIdParameter, recFoodStyleIdParameter, recDifficultyLevelIdParameter, recMealCostIdParameter, preparationTimeParameter, cookTimeParameter, dosesParameter, evaluationParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSelRecipeIngredientDetails_Result> spSelRecipeIngredientDetails(Nullable<int> idRecipe)
        {
            var idRecipeParameter = idRecipe.HasValue ?
                new ObjectParameter("idRecipe", idRecipe) :
                new ObjectParameter("idRecipe", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelRecipeIngredientDetails_Result>("spSelRecipeIngredientDetails", idRecipeParameter);
        }
    
        public virtual ObjectResult<spSelUnitsDetails_Result> spSelUnitsDetails(Nullable<byte> idUnit, string unitName, Nullable<byte> unitcategoryid, Nullable<byte> unitsystemid)
        {
            var idUnitParameter = idUnit.HasValue ?
                new ObjectParameter("idUnit", idUnit) :
                new ObjectParameter("idUnit", typeof(byte));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("unitName", unitName) :
                new ObjectParameter("unitName", typeof(string));
    
            var unitcategoryidParameter = unitcategoryid.HasValue ?
                new ObjectParameter("unitcategoryid", unitcategoryid) :
                new ObjectParameter("unitcategoryid", typeof(byte));
    
            var unitsystemidParameter = unitsystemid.HasValue ?
                new ObjectParameter("unitsystemid", unitsystemid) :
                new ObjectParameter("unitsystemid", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUnitsDetails_Result>("spSelUnitsDetails", idUnitParameter, unitNameParameter, unitcategoryidParameter, unitsystemidParameter);
        }
    
        public virtual ObjectResult<spSelUsersDetails_Result> spSelUsersDetails(Nullable<int> idUser, Nullable<int> loginId, Nullable<byte> statusId)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var loginIdParameter = loginId.HasValue ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUsersDetails_Result>("spSelUsersDetails", idUserParameter, loginIdParameter, statusIdParameter);
        }
    
        public virtual ObjectResult<spSelUnitCategory_Result> spSelUnitCategory(Nullable<byte> id, string unitCategory)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(byte));
    
            var unitCategoryParameter = unitCategory != null ?
                new ObjectParameter("unitCategory", unitCategory) :
                new ObjectParameter("unitCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUnitCategory_Result>("spSelUnitCategory", idParameter, unitCategoryParameter);
        }
    
        public virtual ObjectResult<spSelUnitSystem_Result> spSelUnitSystem(Nullable<byte> id, string unitSystem)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(byte));
    
            var unitSystemParameter = unitSystem != null ?
                new ObjectParameter("unitSystem", unitSystem) :
                new ObjectParameter("unitSystem", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelUnitSystem_Result>("spSelUnitSystem", idParameter, unitSystemParameter);
        }
    }
}
